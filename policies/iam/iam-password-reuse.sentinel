# This policy requires that the `password_reuse_prevention` attribute of the `aws_iam_account_password_policy`
# resource is according to CIS standards

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

# Imports

import "tfplan/v2" as tfplan
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Params

# allowed_password_reuse_limit refers to the number of passwords to remember to prevent reuse
# `password_reuse_prevention` attribute of the `aws_iam_account_password_policy` resource must be equal to allowed_password_reuse_limit.
param allowed_password_reuse_limit default 24

# Constants
const = {
	"policy_name":               "iam-password-reuse",
	"password_reuse_prevention": "password_reuse_prevention",
}

# Functions
generate_violation_message = func(violation) {
	if violation.values[const.password_reuse_prevention] is not defined {
		return "Attribute 'password_reuse_prevention' must be equal to " + string(allowed_password_reuse_limit) + " for 'aws_iam_account_password_policy' resources. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/iam-controls.html#iam-16 for more details."
	}
	return "Attribute 'password_reuse_prevention' with value " + string(violation.values[const.password_reuse_prevention]) + " must be equal to " + string(allowed_password_reuse_limit) + " for 'aws_iam_account_password_policy' resources. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/iam-controls.html#iam-16 for more details."
}

# Variables

resources = tf.plan(tfplan.planned_values.resources).type("aws_iam_account_password_policy").resources
violations = collection.reject(resources, func(res) {
	key = "values.password_reuse_prevention"
	return maps.has(res, key) and maps.get(res, key) is allowed_password_reuse_limit
})

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        generate_violation_message(v),
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
